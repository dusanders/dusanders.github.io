<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="../stylesheet.css">

    <script src="http://code.jquery.com/jquery-1.9.1.js"></script>
    <script type="text/javascript" src="../script.js"></script>
    <title>HashTable</title>
</head>
<body>
    <div id="background" style="padding-top: 200px; padding-left:100px;"><img src="logoC.jpg" /></div>
    <div id="container">
    <div class="content-div">
        <h1 style="text-align:center;">Hash Map</h1>
        <p>
            This is a simple hash map written in C#. The program uses two classes; a Person class which stores information about a person, and a HashTable class
            which handles all hash map functions. The HashTable class consists of a constructor, an 'addItem' method, 'deleteItem' method, 'retrieveItem' method, 
            'hashFunction' method, and 'clone' method. The class also contains two private methods, 'checkSize' and 'isPrime' that are used to adjust table that is 
            intended to use quadratic probing. The HashTable class also implements ICloneable.
        </p>
        <h2>Creation of HashTable Objects</h2>
        <p>
            The constructor for the class expects two arguments, a requested size and a boolean value indicating whether this HashTable should use linear probing.
            We default the constructor to use quadratic probing in the event that we are not supplied a value. We then set the size of the hash table and if we are using
            quadratic probing, we adjust the actual table size to allow for this method of collision avoidence.
        </p>
	<div class="codeBoxN">
	<pre>
        </span><span class="sc5">public</span><span class="sc0"> </span><span class="sc11">HashTable</span><span class="sc10">(</span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">requestedSize</span><span class="sc10">,</span><span class="sc0"> </span><span class="sc16">bool</span><span class="sc0"> </span><span class="sc11">useLinearProbing</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">false</span><span class="sc10">)</span><span class="sc0">
        </span><span class="sc10">{</span><span class="sc0">
            </span><span class="sc11">maxSize</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc11">requestedSize</span><span class="sc10">;</span><span class="sc0">
            </span><span class="sc11">linearProbing</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc11">useLinearProbing</span><span class="sc10">;</span><span class="sc0">
            </span><span class="sc11">currentItems</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc4">0</span><span class="sc10">;</span><span class="sc0">
            </span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">size</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc11">requestedSize</span><span class="sc10">;</span><span class="sc0">
            </span><span class="sc5">if</span><span class="sc10">(!</span><span class="sc11">useLinearProbing</span><span class="sc10">)</span><span class="sc0">
            </span><span class="sc10">{</span><span class="sc0">
                </span><span class="sc11">size</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc11">checkSize</span><span class="sc10">(</span><span class="sc11">maxSize</span><span class="sc10">);</span><span class="sc0">
            </span><span class="sc10">}</span><span class="sc0">
            </span><span class="sc11">items</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">new</span><span class="sc0"> </span><span class="sc5">object</span><span class="sc10">[</span><span class="sc11">size</span><span class="sc10">];</span><span class="sc0">
        </span><span class="sc10">}</span><span class="sc0">
        </span>	
	</pre><div class="caption">Here we see the constructor for the HashTable objects.</div>
	</div>
		<p>
		The constructor checks whether we are using quadratic probing, if we are we call our 'checkSize' method
		and pass the requested size to this method. The method will check this size and see if it is 
		appropriate for quadratic probing. If the size is not appropriate, we increment the size and check 
		it again, repeating this process until we reach a suitable size. This allows us to have the smallest
		available table size that still satisfies the conditions required for quadratic probing.		
		</p>	
	<div class="codeBoxN">
	<pre>
	<span class="sc5">private</span><span class="sc0"> </span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">checkSize</span><span class="sc10">(</span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">passedSize</span><span class="sc10">)</span><span class="sc0">
        </span><span class="sc10">{</span><span class="sc0">
            </span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc11">passedSize</span><span class="sc10">;</span><span class="sc0">
            </span><span class="sc16">bool</span><span class="sc0"> </span><span class="sc11">found</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">false</span><span class="sc10">;</span><span class="sc0">
            </span><span class="sc5">while</span><span class="sc0"> </span><span class="sc10">(!</span><span class="sc11">found</span><span class="sc10">)</span><span class="sc0">
            </span><span class="sc10">{</span><span class="sc0">
                </span><span class="sc5">if</span><span class="sc0"> </span><span class="sc10">(</span><span class="sc11">isPrime</span><span class="sc10">(</span><span class="sc11">result</span><span class="sc10">)</span><span class="sc0"> </span><span class="sc10">&amp;&amp;</span><span class="sc0"> </span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">%</span><span class="sc0"> </span><span class="sc4">4</span><span class="sc0"> </span><span class="sc10">==</span><span class="sc0"> </span><span class="sc4">3</span><span class="sc10">)</span><span class="sc0">
                </span><span class="sc10">{</span><span class="sc0">
                    </span><span class="sc11">found</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">true</span><span class="sc10">;</span><span class="sc0">
                </span><span class="sc10">}</span><span class="sc0">
                </span><span class="sc5">else</span><span class="sc0"> </span><span class="sc5">if</span><span class="sc10">((</span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">%</span><span class="sc0"> </span><span class="sc4">2</span><span class="sc0"> </span><span class="sc10">==</span><span class="sc0"> </span><span class="sc4">0</span><span class="sc10">)</span><span class="sc0"> </span><span class="sc10">&amp;&amp;</span><span class="sc0"> </span><span class="sc10">(</span><span class="sc11">isPrime</span><span class="sc10">(</span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">/</span><span class="sc0"> </span><span class="sc4">2</span><span class="sc10">))</span><span class="sc0"> </span><span class="sc10">&amp;&amp;</span><span class="sc0"> </span><span class="sc10">((</span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">/</span><span class="sc0"> </span><span class="sc4">2</span><span class="sc10">)</span><span class="sc0"> </span><span class="sc10">%</span><span class="sc0"> </span><span class="sc4">4</span><span class="sc0"> </span><span class="sc10">==</span><span class="sc0"> </span><span class="sc4">3</span><span class="sc10">))</span><span class="sc0">
                </span><span class="sc10">{</span><span class="sc0">
                    </span><span class="sc11">found</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">true</span><span class="sc10">;</span><span class="sc0">
                </span><span class="sc10">}</span><span class="sc0">
                </span><span class="sc5">else</span><span class="sc0">
                </span><span class="sc10">{</span><span class="sc0">
                    </span><span class="sc11">result</span><span class="sc10">++;</span><span class="sc0">
                </span><span class="sc10">}</span><span class="sc0">
            </span><span class="sc10">}</span><span class="sc0">
            </span><span class="sc5">return</span><span class="sc0"> </span><span class="sc11">result</span><span class="sc10">;</span><span class="sc0">
        </span><span class="sc10">}</span><span class="sc0">


        </span><span class="sc5">private</span><span class="sc0"> </span><span class="sc16">bool</span><span class="sc0"> </span><span class="sc11">isPrime</span><span class="sc10">(</span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">passedInt</span><span class="sc10">)</span><span class="sc0">
        </span><span class="sc10">{</span><span class="sc0">
            </span><span class="sc16">bool</span><span class="sc0"> </span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">true</span><span class="sc10">;</span><span class="sc0">
            </span><span class="sc5">for</span><span class="sc10">(</span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">i</span><span class="sc10">=</span><span class="sc4">2</span><span class="sc10">;</span><span class="sc0"> </span><span class="sc11">i</span><span class="sc10">*</span><span class="sc11">i</span><span class="sc10">&lt;=</span><span class="sc11">passedInt</span><span class="sc10">;</span><span class="sc0"> </span><span class="sc11">i</span><span class="sc10">++)</span><span class="sc0">
            </span><span class="sc10">{</span><span class="sc0">
                </span><span class="sc5">if</span><span class="sc10">(</span><span class="sc11">passedInt</span><span class="sc0"> </span><span class="sc10">%</span><span class="sc0"> </span><span class="sc11">i</span><span class="sc0"> </span><span class="sc10">==</span><span class="sc0"> </span><span class="sc4">0</span><span class="sc10">)</span><span class="sc0">
                </span><span class="sc10">{</span><span class="sc0">
                    </span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">false</span><span class="sc10">;</span><span class="sc0">
                    </span><span class="sc5">break</span><span class="sc10">;</span><span class="sc0">
                </span><span class="sc10">}</span><span class="sc0">
            </span><span class="sc10">}</span><span class="sc0">
            </span><span class="sc5">return</span><span class="sc0"> </span><span class="sc11">result</span><span class="sc10">;</span><span class="sc0">
        </span><span class="sc10">}</span>
	</pre><div class="caption">Here we see the 'checkSize' method that is called from the constructor. We also see the
	'isPrime' method that is used within 'checkSize'.</div>
	</div>
	<div class="space"></div>
	<h2>Operation</h2>
	<p>
	Once the table is created, the user can use the table to add items, retrieve items, delete items, and
	clone the table. The 'addItem', 'retrieveItem', and 'deleteItem' check which probing technique is currently
	selected and use that method of probing. The class also implements ICloneable which requires us to 
	implement the 'Clone' method. This method simply creates a new HashTable object and copies the current
	table's elements into this new table; the method returns the newly formed table.
	</p>
	<div class="codeBoxN">
	<pre>
<span class="sc5">public</span><span class="sc0"> </span><span class="sc5">object</span><span class="sc0"> </span><span class="sc11">Clone</span><span class="sc10">()</span><span class="sc0">
        </span><span class="sc10">{</span><span class="sc0">            
            </span><span class="sc11">HashTable</span><span class="sc0"> </span><span class="sc11">result</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc5">new</span><span class="sc0"> </span><span class="sc11">HashTable</span><span class="sc10">(</span><span class="sc11">maxSize</span><span class="sc10">,</span><span class="sc0"> </span><span class="sc11">linearProbing</span><span class="sc10">);</span><span class="sc0">
            </span><span class="sc16">uint</span><span class="sc0"> </span><span class="sc11">itemCount</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc11">checkSize</span><span class="sc10">(</span><span class="sc11">maxSize</span><span class="sc10">);</span><span class="sc0">
            </span><span class="sc5">for</span><span class="sc0"> </span><span class="sc10">(</span><span class="sc16">int</span><span class="sc0"> </span><span class="sc11">i</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc4">0</span><span class="sc10">;</span><span class="sc0"> </span><span class="sc11">i</span><span class="sc0"> </span><span class="sc10">&lt;</span><span class="sc11">itemCount</span><span class="sc0"> </span><span class="sc10">;</span><span class="sc0"> </span><span class="sc11">i</span><span class="sc10">++</span><span class="sc0"> </span><span class="sc10">)</span><span class="sc0">
            </span><span class="sc10">{</span><span class="sc0">
                </span><span class="sc5">if</span><span class="sc0"> </span><span class="sc10">(</span><span class="sc11">items</span><span class="sc10">[</span><span class="sc11">i</span><span class="sc10">]</span><span class="sc0"> </span><span class="sc10">!=</span><span class="sc0"> </span><span class="sc5">null</span><span class="sc10">)</span><span class="sc0">
                </span><span class="sc10">{</span><span class="sc0">
                    </span><span class="sc11">dynamic</span><span class="sc0"> </span><span class="sc11">item</span><span class="sc0"> </span><span class="sc10">=</span><span class="sc0"> </span><span class="sc11">items</span><span class="sc10">[</span><span class="sc11">i</span><span class="sc10">];</span><span class="sc0">
                    </span><span class="sc11">result</span><span class="sc10">.</span><span class="sc11">addItem</span><span class="sc10">(</span><span class="sc11">item</span><span class="sc10">);</span><span class="sc0">
                </span><span class="sc10">}</span><span class="sc0">
            </span><span class="sc10">}</span><span class="sc0">
            </span><span class="sc5">return</span><span class="sc0"> </span><span class="sc11">result</span><span class="sc10">;</span><span class="sc0">
        </span><span class="sc10">}</span>
	</pre><div class="caption">Here we see the 'Clone' method that must be implemented for our class to implement ICloneable. </div>
	</div>
	<div class="space"></div>
	<h2>Conclusion</h2>
	<p>
	The class uses a very simple hash function which should be noted. This was done for simplicity and was 
	completely arbitrary in choice. The class also lacks any use of linked lists to deal with collisions, 
	this is something that I would like to incorporate at some point.	
	</p>
    </div><!--end content-div-->

        <div id="sideBar">
            <ul id="sideBarList">
                <p style="text-align:center; text-decoration:underline;">Projects</p>
                <li class="sideBarItem" style="color: #006600; cursor:default;">HashMap Class</li>
                <li class="sideBarItem"><a href="File.html">File Compression</a></li>
                <li class="sideBarItem"><a href="Game.html">Game Theory</a></li>
            </ul>
        </div>
        <div id="menuBar">
            <ul id="menuList">
                <li class="menuItem"><a href="../CPP/CPP.html">C++</a></li>
                <li class="menuItem" style="color: #80CC80;">C#</li>
                <li class="menuItem"><a href="../JAVA/Java.html">Java</a></li>
                <li class="menuItem"><a href="../ASM/ASM.html">Embedded Systems</a></li>
                <li class="menuItem"><a href="../ANDROID/AndroidHome.html">Android</a></li>
            </ul>
        </div>
    </div><!--end container-->
</body>
</html>
